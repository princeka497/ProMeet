/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.64
 * Generated at: 2025-05-02 10:35:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_005fclass_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/common_html/all_css.html", Long.valueOf(1742493036175L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write(" ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.9.0/css/all.min.css\" integrity=\"sha512-q3eWabyZPc1XTCmF+8/LuE1ozpg5xxn7iO89yfSOd5/oKvyqLngoNGsx8jq92Y8eXJ/IRxQbEC+FGSYxtk2oiw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Roboto:ital,wght@0,100..900;1,100..900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\r\n");
      out.write("\r\n");
      out.write("<link rel=\"icon\" href=\"/ProMeet/images/promeet1.jpg\" class=\"rounded-circle\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/ProMeet/css/style.css\">");
      out.write("\r\n");
      out.write("\r\n");
      out.write("      \r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Urbanist:wght@400;600;700&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\" integrity=\"sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\r\n");
      out.write("    <style>\r\n");
      out.write("        #root {\r\n");
      out.write("            width: 100vw;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("            }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"root\"></div>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    ");
String cid=(String)request.getAttribute("userClassId"); 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("<script src=\"https://unpkg.com/@zegocloud/zego-uikit-prebuilt/zego-uikit-prebuilt.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("window.onload = function () {\r\n");
      out.write("    function getUrlParams(url) {\r\n");
      out.write("        let urlStr = url.split('?')[1];\r\n");
      out.write("        const urlSearchParams = new URLSearchParams(urlStr);\r\n");
      out.write("        const result = Object.fromEntries(urlSearchParams.entries());\r\n");
      out.write("        return result;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // Generate a Token by calling a method.\r\n");
      out.write("        // @param 1: appID\r\n");
      out.write("        // @param 2: serverSecret\r\n");
      out.write("        // @param 3: Room ID\r\n");
      out.write("        // @param 4: User ID\r\n");
      out.write("        // @param 5: Username\r\n");
      out.write("    const roomID = getUrlParams(window.location.href)['roomID'] ||\"");
      out.print(cid);
      out.write("\";\r\n");
      out.write("    const userID = Math.floor(Math.random() * 10000) + \"\";\r\n");
      out.write("    const userName = \"userName\" + userID;\r\n");
      out.write("    const appID = 293772691;\r\n");
      out.write("    const serverSecret = \"edfca8c4aaa6ca2867a9ba112c61ef2e\";\r\n");
      out.write("    const kitToken = ZegoUIKitPrebuilt.generateKitTokenForTest(appID, serverSecret, roomID, userID, userName);\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("        const zp = ZegoUIKitPrebuilt.create(kitToken);\r\n");
      out.write("        zp.joinRoom({\r\n");
      out.write("            container: document.querySelector(\"#root\"),\r\n");
      out.write("            sharedLinks: [{\r\n");
      out.write("                name: 'Personal link',\r\n");
      out.write("                url: window.location.protocol + '//' + window.location.host  + window.location.pathname + '?roomID=' + roomID,\r\n");
      out.write("            }],\r\n");
      out.write("            scenario: {\r\n");
      out.write("                mode: ZegoUIKitPrebuilt.VideoConference,\r\n");
      out.write("            },\r\n");
      out.write("                \r\n");
      out.write("           	turnOnMicrophoneWhenJoining: true,\r\n");
      out.write("           	turnOnCameraWhenJoining: true,\r\n");
      out.write("           	showMyCameraToggleButton: true,\r\n");
      out.write("           	showMyMicrophoneToggleButton: true,\r\n");
      out.write("           	showAudioVideoSettingsButton: true,\r\n");
      out.write("           	showScreenSharingButton: true,\r\n");
      out.write("           	showTextChat: true,\r\n");
      out.write("           	showUserList: true,\r\n");
      out.write("           	maxUsers: 50,\r\n");
      out.write("           	layout: \"Sidebar\",\r\n");
      out.write("           	showLayoutButton: true,\r\n");
      out.write("         \r\n");
      out.write("            });\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("function moveToHome(){\r\n");
      out.write("\r\n");
      out.write("	window.location.href=\"/ProMeet/user/expert_response.jsp\"\r\n");
      out.write("	}\r\n");
      out.write("const cid = \"");
      out.print( cid );
      out.write("\"; // Get cid from JSP variable\r\n");
      out.write("\r\n");
      out.write("function checkStatusFromServlet() {\r\n");
      out.write("    $.ajax({\r\n");
      out.write("        url: '/ProMeet/CheckClassStatus?cid=' + cid,\r\n");
      out.write("        type: 'GET',\r\n");
      out.write("        success: function(response) {\r\n");
      out.write("            const result =  response.trim().toLowerCase();\r\n");
      out.write("            console.log(typeof result);\r\n");
      out.write("\r\n");
      out.write("            if (result==\"true\") {\r\n");
      out.write("                console.log(\"Status: true\");\r\n");
      out.write("                // Add any logic here when status is true\r\n");
      out.write("               \r\n");
      out.write("            } else {\r\n");
      out.write("                console.log(\"Status: false\");\r\n");
      out.write("                clearInterval(x)\r\n");
      out.write("                alert(\"Meeting will be Ended in 10 seconds\")\r\n");
      out.write("                setTimeout(moveToHome,10000)\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        error: function(xhr, status, error) {\r\n");
      out.write("            console.error(\"Error calling servlet:\", error);\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("let x=setInterval(checkStatusFromServlet, 5000);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
